buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.26.1"
}

repositories {
    maven {
        url artifactory_contextUrl + '/ACsGuisRepo'
    }
    maven {
        url artifactory_contextUrl + '/DynamXRepo'
    }
    maven { url = 'https://repo.spongepowered.org/maven' }

    flatDir {
        dir 'libs'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = version_major + "." + version_minor + "." + version_patch
group = "fr.dynamx"
archivesBaseName = "DynamX"

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    accessTransformer = file('src/main/resources/META-INF/dynamx_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation 'com.github.stephengold:Libbulletjme:' + libbulletjme_version
    implementation "fr.aym.acsguis:ACsGuis:1.2.5"
    implementation ":ModProtectionLib:1.2.5"
    implementation('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    compileOnly 'org.projectlombok:lombok:1.18.24'

    shadow('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    shadow 'com.github.stephengold:Libbulletjme:' + libbulletjme_version


    shadow fileTree(dir: 'libs', include: '*.jar')

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "refmap.dynamxmod.json"
}

jar {
    duplicatesStrategy 'exclude'
    manifest {
        attributes "FMLCorePlugin": "fr.dynamx.common.core.DynamXCoreMod"
        attributes "FMLAT": "dynamx_at.cfg"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": "mixins.dynamxmod.json"
    }
}

shadowJar {
    duplicatesStrategy 'exclude'
    configurations = [project.configurations.shadow]
    classifier = 'all'
}

reobf {
    shadowJar {
    }
}

jar.finalizedBy('reobfJar')

/** Shit that idea needs to process resources ? **/
idea {
    module {
        inheritOutputDirs = true
    }
}
subprojects {
    apply plugin: 'idea'
}
task prepareAssets(type: Copy) {
    group = 'build'
    from project.file('src/main/resources')
    into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)
/** end of shit **/

ext {
    builtFile = ""
    builtFileSources = ""
}

task onBuild(type: Jar) {
    builtFile = archiveName.replaceAll(".jar", "-all.jar")
    builtFileSources = archiveName.replaceAll(".jar", "-sources.jar")
}

task copyBuiltJar(type: Copy, dependsOn: onBuild) {
    project.logger.lifecycle("Jar normal " + builtFile)
    from file("$buildDir/libs/${builtFile}")
    into file("MpsIn")
}

task copyBuiltJarSources(type: Copy, dependsOn: onBuild) {
    project.logger.lifecycle("Jar sources " + builtFileSources)
    from file("$buildDir/libs/${builtFileSources}")
    into file("MpsIn")
}

task runMPSJar(type: JavaExec, dependsOn: copyBuiltJar) {
    // Executable jars can have only _one_ jar on the classpath.
    classpath = files("MpsExporter.jar")

    // 'main' does not need to be specified
    main = 'fr.aym.mps.exporter.MpsExporter'

    // arguments to pass to the application
    args 'export_mod'
    args "${builtFile}"
    args "${version}"
}
task runMPSJarSources(type: JavaExec, dependsOn: copyBuiltJarSources) {
    // Executable jars can have only _one_ jar on the classpath.
    classpath = files("MpsExporter.jar")

    // 'main' does not need to be specified
    main = 'fr.aym.mps.exporter.MpsExporter'

    // arguments to pass to the application
    args 'export_mod'
    args "${builtFileSources}"
    args "${version}"
}

tasks.reobfShadowJar.mustRunAfter shadowJar
tasks.onBuild.mustRunAfter reobfShadowJar
tasks.runMPSJar.mustRunAfter reobfShadowJar
tasks.runMPSJarSources.mustRunAfter runMPSJar

task sourcesJar(type: Jar, dependsOn: classes) {
    from(sourceSets.main.allSource) {
        include 'fr/**/**'
    }
    from (sourceSets.main.output){
        include '**'
    }
    classifier = 'sources'
}

build {
    dependsOn reobfShadowJar
    dependsOn runMPSJar
}

runMPSJar {
    dependsOn copyBuiltJar
}

artifactoryPublish.dependsOn build
artifactoryPublish.dependsOn runMPSJarSources

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = mavenArtifactId
            //from components.java
            artifact source: ("MpsOut/${builtFile}"), extension: 'jar'
            artifact source: ("MpsOut/${builtFileSources}"), classifier: "sources", extension: 'jar'
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'DynamXRepo'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
}